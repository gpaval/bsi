service: bsi-bim

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  profile: bsi

  environment:
    ENTITIES_TABLE: ${self:provider.stage}-Entities

  iamRoleStatements:
    - Effect: "Allow"
      Action: "*"
      Resource: "*"

functions:
  getData:
    handler: src/getData.handler
    events:
      - http:
          path: getData
          method: get
          integration: lambda
          cors: true
          request:
            template:
              application/json: ${file(config.yml):application_json}

  insertData:
    handler: src/insertData.handler
    events:
      - http:
          path: insertData
          method: post
          integration: lambda
          cors: true
          request:
            template:
              application/json: ${file(config.yml):application_json}

  insertCognitoUser:
    handler: src/insertCognitoUser.handler
    events:
      - http:
          path: insertCognitoUser
          method: post
          integration: lambda
          cors: true
          request:
            template:
              application/json: ${file(config.yml):application_json}

  getThirdParty:
    handler: src/getThirdParty.handler
    events:
      - http:
          path: getThirdParty
          method: get
          integration: lambda
          cors: true
          request:
            template:
              application/json: ${file(config.yml):application_json}

  websocket:
    handler: src/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: ceva

# you can add CloudFormation resource templates here
resources:
 Resources:
  qldbLedger:
    Type: AWS::QLDB::Ledger
    Properties:
      Name: qldb-ledger-${self:provider.stage}
      DeletionProtection: false
      PermissionsMode: ALLOW_ALL

  # Cognito - User pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:provider.stage}-user-pool
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  # Cognito - Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:provider.stage}-user-pool-client
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ${self:provider.stage}_user_identity_pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: [CognitoUserPool, ProviderName]


  #DYNAMODB
  Entities:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.stage}-Entities
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST